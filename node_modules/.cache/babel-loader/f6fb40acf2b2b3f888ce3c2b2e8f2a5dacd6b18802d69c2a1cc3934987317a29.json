{"ast":null,"code":"import { userAPI } from \"../api/api\";\nconst FOLLOW = 'FOLLOW';\nconst UNFOLLOW = 'UNFOLLOW';\nconst SET_USERS = 'SET_USERS';\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\nconst SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT';\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING';\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS';\nlet initialState = {\n  users: [],\n  pageSize: 10,\n  totalUsersCount: 21,\n  currentPage: 1,\n  isFetching: false,\n  followingInProgress: []\n};\nconst usersReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case FOLLOW:\n      return {\n        ...state\n        // users: state.users.map(u => {\n        //     if (u.id === action.userId) {\n        //         return {...u, followed: true}\n        //     }\n        //     return u;\n        // })\n      };\n\n    case UNFOLLOW:\n      return {\n        ...state,\n        users: state.users.map(u => {\n          if (u.id === action.userId) {\n            return {\n              ...u,\n              followed: false\n            };\n          }\n          return u;\n        })\n      };\n    case SET_USERS:\n      {\n        return {\n          ...state,\n          users: action.users\n        };\n      }\n    case SET_CURRENT_PAGE:\n      {\n        return {\n          ...state,\n          currentPage: action.currentPage\n        };\n      }\n    case SET_TOTAL_USERS_COUNT:\n      {\n        return {\n          ...state,\n          totalUsersCount: action.count\n        };\n      }\n    case TOGGLE_IS_FETCHING:\n      {\n        return {\n          ...state,\n          isFetching: action.isFetching\n        };\n      }\n    case TOGGLE_IS_FOLLOWING_PROGRESS:\n      {\n        return {\n          ...state,\n          followingInProgress: action.isFetching ? [...state.followingInProgress, action.userId] : state.followingInProgress.filter(id => id !== action.userId)\n        };\n      }\n    default:\n      return state;\n  }\n};\nexport const followSuccess = userId => ({\n  type: FOLLOW,\n  userId\n});\nexport const unfollowSuccess = userId => ({\n  type: UNFOLLOW,\n  userId\n});\nexport const setUsers = users => ({\n  type: SET_USERS,\n  users\n});\nexport const setCurrentPage = currentPage => ({\n  type: SET_CURRENT_PAGE,\n  currentPage\n});\nexport const setTotalUsersCount = count => ({\n  type: SET_TOTAL_USERS_COUNT,\n  count\n});\nexport const toggleIsFetching = isFetching => ({\n  type: TOGGLE_IS_FETCHING,\n  isFetching\n});\nexport const toggleFollowingProgress = (isFetching, userId) => ({\n  type: TOGGLE_IS_FOLLOWING_PROGRESS,\n  isFetching,\n  userId\n});\nexport const requestUsers = (page, pageSize) => {\n  return async dispatch => {\n    dispatch(toggleIsFetching(true));\n    dispatch(setCurrentPage(page));\n    let data = await userAPI.getUsers(page, pageSize);\n    dispatch(toggleIsFetching(false));\n    dispatch(setUsers(data.items));\n    dispatch(setTotalUsersCount(data.totalCount));\n  };\n};\nexport const followUnfollowFlow = async (dispatch, userId, apiMethod, actionCreator) => {\n  dispatch(toggleFollowingProgress(true, userId));\n  let response = await apiMethod(userId);\n  if (response.data.resultCode === 0) {\n    dispatch(actionCreator(userId));\n  }\n  dispatch(toggleFollowingProgress(false, userId));\n};\nexport const follow = userId => {\n  return async dispatch => {\n    followUnfollowFlow(dispatch, userId, userAPI.follow.bind(userAPI), followSuccess);\n  };\n};\nexport const unfollow = userId => {\n  return async dispatch => {\n    followUnfollowFlow(dispatch, userId, userAPI.unfollow.bind(userAPI), unfollowSuccess);\n  };\n};\nexport default usersReducer;","map":{"version":3,"names":["userAPI","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOWING_PROGRESS","initialState","users","pageSize","totalUsersCount","currentPage","isFetching","followingInProgress","usersReducer","state","action","type","map","u","id","userId","followed","count","filter","followSuccess","unfollowSuccess","setUsers","setCurrentPage","setTotalUsersCount","toggleIsFetching","toggleFollowingProgress","requestUsers","page","dispatch","data","getUsers","items","totalCount","followUnfollowFlow","apiMethod","actionCreator","response","resultCode","follow","bind","unfollow"],"sources":["C:/Users/Kwell/Documents/GitHub/react-project-1/src/redux/users-reducer.js"],"sourcesContent":["import {userAPI} from \"../api/api\";\r\n\r\nconst FOLLOW = 'FOLLOW';\r\nconst UNFOLLOW = 'UNFOLLOW';\r\nconst SET_USERS = 'SET_USERS';\r\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\r\nconst SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT';\r\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING';\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS';\r\n\r\nlet initialState = {\r\n    users: [],\r\n    pageSize: 10,\r\n    totalUsersCount: 21,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: []\r\n}\r\n\r\nconst usersReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                // users: state.users.map(u => {\r\n                //     if (u.id === action.userId) {\r\n                //         return {...u, followed: true}\r\n                //     }\r\n                //     return u;\r\n                // })\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n        case SET_USERS: {\r\n            return {...state, users: action.users}\r\n        }\r\n        case SET_CURRENT_PAGE: {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        case SET_TOTAL_USERS_COUNT: {\r\n            return {...state, totalUsersCount: action.count}\r\n        }\r\n        case TOGGLE_IS_FETCHING: {\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS: {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id !== action.userId)\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const followSuccess = (userId) => ({type: FOLLOW, userId})\r\nexport const unfollowSuccess = (userId) => ({type: UNFOLLOW, userId})\r\nexport const setUsers = (users) => ({type: SET_USERS, users})\r\nexport const setCurrentPage = (currentPage) => ({type: SET_CURRENT_PAGE, currentPage})\r\nexport const setTotalUsersCount = (count) => ({type: SET_TOTAL_USERS_COUNT, count})\r\nexport const toggleIsFetching = (isFetching) => ({type: TOGGLE_IS_FETCHING, isFetching})\r\nexport const toggleFollowingProgress = (isFetching, userId) => ({\r\n    type: TOGGLE_IS_FOLLOWING_PROGRESS,\r\n    isFetching,\r\n    userId\r\n})\r\n\r\nexport const requestUsers = (page, pageSize) => {\r\n    return async (dispatch) => {\r\n        dispatch(toggleIsFetching(true));\r\n        dispatch(setCurrentPage(page))\r\n\r\n        let data = await userAPI.getUsers(page, pageSize)\r\n        dispatch(toggleIsFetching(false));\r\n        dispatch(setUsers(data.items));\r\n        dispatch(setTotalUsersCount(data.totalCount));\r\n    }\r\n}\r\nexport const followUnfollowFlow = async (dispatch, userId, apiMethod, actionCreator) => {\r\n    dispatch(toggleFollowingProgress(true, userId));\r\n    let response = await apiMethod(userId)\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(actionCreator(userId));\r\n    }\r\n    dispatch(toggleFollowingProgress(false, userId));\r\n}\r\n\r\nexport const follow = (userId) => {\r\n    return async (dispatch) => {\r\n        followUnfollowFlow(dispatch, userId, userAPI.follow.bind(userAPI), followSuccess)\r\n    }\r\n}\r\nexport const unfollow = (userId) => {\r\n    return async (dispatch) => {\r\n        followUnfollowFlow(dispatch, userId, userAPI.unfollow.bind(userAPI), unfollowSuccess)\r\n    }\r\n}\r\n\r\nexport default usersReducer;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}